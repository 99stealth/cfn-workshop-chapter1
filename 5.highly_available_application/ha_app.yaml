Resources:
# < EC2
  # < SecurityGroup for Elastic Load Balancer

  # SecurityGroup for Elastic Load Balancer >
  # < SecurityGroupIngress rule for Elastic Load Balancer which allows HTTP 80 from anywhere

  # SecurityGroupIngress rule for Elastic Load Balancer which allows HTTP 80 from anywhere >
  # < SecurityGroup for EC2 Auto Scaling Group

  # Security Group for EC2 Auto Scaling Group >
  # < SecurityGroupIngress rule for EC2 Auto Scaling Group which allows SSH from defined in Parameters IP address

  # SecurityGroupIngress rule for EC2 Auto Scaling Group which allows SSH from defined in Parameters IP address >
  # < SecurityGroupIngress rule for EC2 Auto Scaling Group which allows HTTP 8000 from ELB Security Group
  EC2AllowHTTP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt EC2SecurityGroup.GroupId
      Description: Allows HTTP to instances from ELB
      IpProtocol: tcp
      FromPort: 8000
      ToPort: 8000
      SourceSecurityGroupId: !GetAtt ELBSecurityGroup.GroupId
  # SecurityGroupIngress rule for EC2 Auto Scaling Group which allows HTTP 8000 from ELB Security Group >
# EC2 >



# < RDS 
  # < DBSecurityGroup rule for RDS Instance which allows to connect to it from anywhere
  MySqlDbSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      GroupDescription: Connect to MySQL DB
      DBSecurityGroupIngress:
        -
          CIDRIP: 0.0.0.0/0
  # DBSecurityGroup rule for RDS Instance which allows to connect to it from anywhere >
  # < DBInstance for storring appication data
  MySqlDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: !Ref RDSInstanceStorageAllocation
      DBInstanceClass: !Ref RDSInstanceType
      Engine: MySQL
      EngineVersion: !Ref MySqlEngineVersion
      StorageType: gp2
      MasterUsername: !Ref DbUser
      MasterUserPassword: !Ref DbPasswd
      DBSecurityGroups :
        -
          !Ref MySqlDbSecurityGroup
  # DBInstance for storring appication data >
# < RDS 

# < ElasticLoadBalancing
  # < LoadBalancer
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties: 
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '5'
        Target: 'HTTP:8000/health-check'
        Timeout: '2'
        UnhealthyThreshold: '3'
      Listeners:
        - InstancePort: 8000
          InstanceProtocol: HTTP
          LoadBalancerPort: 80
          Protocol: HTTP
      LoadBalancerName: !Sub ${Environment}-cfn-workshop-elb
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref ELBSecurityGroup
      Subnets: !Ref Subnets
  # LoadBalancer >
# ElasticLoadBalancing >

# < AutoScaling
  # < LaunchConfiguration
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      ImageId: !FindInMap
        - RegionMap
        - !Ref AWS::Region
        - AMIID
      InstanceType: !Ref EC2InstanceType
      KeyName: !Ref SshKey
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroups: 
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub 
        - |
            #!/bin/bash -x
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            yum install git golang mysql57 -y
            if [ $? == 0 ]; then
                echo "Packages installed successfully"
            else
                echo "Package installation is failed"
                exit 1
            fi

            git clone https://github.com/99stealth/cfn-workshop-backend.git
            if [ $? == 0 ]; then
                echo "Repository cloned successfully"
            else
                echo "Repository clone is failed"
                ecit 1
            fi
            cd cfn-workshop-backend

            mysql --user=${DbUser} -h ${DbHost} --password='${DbPasswd}' -e "SELECT 1 FROM cfn_workshop.user" 2>/dev/null || mysql --user=${DbUser} -h ${DbHost} --password='${DbPasswd}' < db_and_table.sql 2>/dev/null

            echo dbName=${DbName} > .env
            echo dbPort=${DbPort} >> .env 
            echo dbUser=${DbUser} >> .env
            echo dbPasswd=${DbPasswd} >> .env 
            echo dbHost=${DbHost} >> .env

            export GOPATH=/cfn-workshop-backend
            export GOCACHE=/cfn-workshop-backend
            go get github.com/go-sql-driver/mysql
            go get github.com/gorilla/mux
            go build -o cfn-workshop-backend-server
            if [ $? == 0 ]; then
                echo "Application has been successfully built"
            else
                echo "Application build is failed"
                exit 1
            fi
            ./cfn-workshop-backend-server &
        - DbHost:
            !GetAtt MySqlDB.Endpoint.Address
          LoadBalancersDns:
            !GetAtt ElasticLoadBalancer.DNSName
        
  # LaunchConfiguration >
  # < AutoScalingGroup
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: 
        Fn::GetAZs: 
          Ref: "AWS::Region"
      AutoScalingGroupName: !Sub ${Environment}-cfn-workshop-autoscaling-group
      DesiredCapacity: 2
      LaunchConfigurationName: !Ref LaunchConfiguration
      LoadBalancerNames: 
        - !Ref ElasticLoadBalancer
      MaxSize: 3
      MinSize: 2
  # AutoScalingGroup >
# AutoScaling >

# < IAM
  # < Role
  EC2InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  # Role >
  # < Policy 
  EC2InstanceRolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "FullAccessToS3"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action: "s3:*"
            Resource: 
              -
                "arn:aws:s3:::*"
      Roles: 
        - !Ref EC2InstanceRole
  # Policy >
  # < InstanceProfile
  EC2InstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - !Ref EC2InstanceRole
  # InstanceProfile >
# IAM >